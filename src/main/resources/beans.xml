<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 使用AspectJ注解起作用: 自动为配置的类生成代理对象 -->
    <!--<aop:aspectj-autoproxy></aop:aspectj-autoproxy>-->

<!--
    导入外部的配置文件
    <context:property-placeholder location="classpath:dbConfig.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${db.user}"></property>
        <property name="password" value="${db.password}"></property>
        <property name="driverClass" value="${db.driverClass}"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/practice"></property>
    </bean>
-->

<!--
    包扫描,只要标注了@service、@controller、@Repository、@Component
    use-default-filters="false": 禁用掉默认的规则,因为默认的规则就是扫描所有的,这样只包含才能生效
    <context:component-scan base-package="com.atguigu" use-default-filters="false"></context:component-scan>
-->

<!--
    使用xml的方式注册bean
    class: Bean的全类名,通过反射的方式在IOC容器中创建Bean,所以要求Bean中必须y有无参数的构造器
    id: 标识容器中的Bean,id唯一表示
    scope: 指定作用范围
    init-method="" 和 destroy-method="": 使用xml的方式对当前bean进行初始化和销毁方法
    <bean id="person" class="com.atguigu.bean.Person" scope="prototype" init-method="" destroy-method="">
        <property name="name" value="Jerry"></property>
        <property name="age" value="23"></property>
-->
        <!--
        如果想属性为null ===> <null/>
        <constructor-arg><null/></constructor-arg>
        -->
        <!--
        内部bean,这个需要在Person.class中引用Car.class(private Car car;)
        <property name="car">
            <bean class="com.atguigu.bean.Car">
                <constructor-arg value="BMW"/>
            </bean>
        </property>
        -->
    <!--</bean>-->


<!--
    通过构造器方法来配置bean的属性
    constructor-arg: 按照属性顺序进行配置
    index: 表示属性的顺序下标

    <bean id="person" class="com.atguigu.bean.Person">
        <constructor-arg value="Jerry" index="0"/>
        <constructor-arg value="23" index="1"/>
        <constructor-arg value="small Jerry" index="2"/>
    </bean>
-->

<!--
    使用构造器注入属性值可以指定参数的位置和参数的类型
    作用: 用来区分重载构造器
    type: 也可以使用类型进行区分
    <bean id="person" class="com.atguigu.bean.Person">
        <constructor-arg value="Jerry" type="java.lang.String"/>
        <constructor-arg value="23" type="int"/>
        <constructor-arg type="java.lang.String">
            <value>small Jerry</value>
        </constructor-arg>
    </bean>
-->

<!--
    开启注解版的切面功能
    <aop:aspectj-autoproxy/>
-->

<!--
    开启基于注解的事务支持
    <tx:annotation-driven/>
-->
</beans>